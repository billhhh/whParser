package com.DBOperation;

import java.io.UnsupportedEncodingException;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Map;

import com.mysql.jdbc.Statement;

public class DBOperation {
	
	Connection conn=null;
	String dbname = "jdbc:mysql://localhost:3306/whrsdbtest?useUnicode=true&characterEncoding=utf8";
	String user = "root";
	String password = "root";
	String sql=null;
	Statement stmt=null;
	ResultSet rs=null;
	
	//1、构造函数，就是得到数据库连接
	public DBOperation(){
		try{
			Class.forName("com.mysql.jdbc.Driver");
			this.conn = DriverManager.getConnection(dbname,user,password);
		}catch(SQLException e){
			System.out.println("数据库连接失败");
		}catch(ClassNotFoundException e){
			e.printStackTrace();
		}
	}
	
	
	
	
	/* 
	 * 2、将商品URL的ArrayList插入数据库
	 * */
	public void insertUrlList(String tablename,ArrayList<String> arrayList)throws SQLException{
		
		for(String urlStr : arrayList){
			/*ignore在某些主键primary约束中避免错误的重复插入*/
			sql = "insert ignore into "+tablename+"(url) values(\"" + urlStr + "\");";
//			System.out.println("sql == "+sql);
			
			stmt = (Statement)conn.createStatement();
			stmt.executeUpdate(sql);
			
			this.close();
		}
	}
	
	
	
	/* @param:null
	 * 3、返回数据库记录条数*/
	public int getRecordNum(String tableName){
		int recordNum = 0;
		sql = "select count(*) from "+tableName+";";
		try{
			if(stmt == null)
				stmt = (Statement)conn.createStatement();
			 rs= stmt.executeQuery(sql);
			 if(rs.next()){
				 recordNum = rs.getInt(1);
			 }
			 }catch(Exception e){
				 System.out.println(e.getMessage());
			 }
		return recordNum;
	}
	
	
	//4、返回行数
	public ArrayList<String> getRows(int pageSize,int first){
		ArrayList<String> rows = new ArrayList<String>();
		sql = "select * from dangdangUrlCache limit " + first + "," + pageSize + ";" ;
		try{
			stmt = (Statement)conn.createStatement();
			ResultSet rs = stmt.executeQuery(sql);
			while(rs.next()){
				rows.add(rs.getString(1));
			}
		}catch(Exception e){
			System.out.println(e.getMessage());
		}
		return rows;
	}
	
	
	
	/* author:Bill
	 * 5、将【商品详情】映射并写入数据库
	 * */
	public void DBmapping(String link,Map<String, String> map)
	{
		//定义变量
		String goodsId = null;
		String innerMaterial=null;
		String price=null;
		String brand=null;
		String hotPoint=null;
		String upperMaterial=null;
		String style=null;
		String heelStyle = null;
		String fashion=null;
		String upperHeight=null;
		String heelHeight=null;
		String toe=null;
		String occasion=null;
		String season=null;
		String pattern=null;
		
		for(String s:map.keySet()){
			//先插入主键，后面方便更新
			if(s.equals("型号"))
				goodsId = map.get(s);
			else
				continue;
			
			try {
				//conn.setAutoCommit(false);//取消自动提交
				
				sql = "insert into shoes(goods_id) values(\"" + goodsId + "\");";
				
				if(stmt == null)
					stmt = (Statement)conn.createStatement();
				stmt.addBatch(sql);
				sql = "insert into shoes_detail(goods_id) values(\"" + goodsId + "\");";
				stmt.addBatch(sql);
				
				//执行批处理语句  
//			   stmt.executeBatch();
			   //如果没有异常，则执行此段代码  
			   //提交事务，真正向数据库中提交数据 
//			   conn.commit();
			   System.out.println("goods_id插入成功！！");
			} catch (Exception e) {
				
				System.out.println("goods_id插入失败。。");
				e.printStackTrace();
			   //将数据回滚  
			   try{
			      conn.rollback();
			   }catch(Exception e1){  
			   }
				// TODO: handle exception
			}finally{
				//this.close();		//这里不应当就close，否则后面不能用连接了
			}
			
			
		}
		
		if(goodsId == null)
		{
			System.out.println("找不到主键，出错了！！");
			return ;		//找不到主键，出错
		}
		
		
		//因为已有主键，正式写入数据库
//		System.out.println(link);
		//link和map都传送过来，准备进行数据库写操作
		for(String s:map.keySet()){
			
			if(s.equals("内里材质")){
				//多对多
				innerMaterial = map.get(s);
				this.writeDBnTon(goodsId,innerMaterial,"inner_material","shoes_inner_material",
						"inner_material_id","inner_material_name");
			}
			
			else if(s.equals("price")){
				price = map.get(s);
			}
			
			else if(s.equals("品牌"))
				brand = map.get(s);
			
			else if(s.equals("类型"))
				hotPoint = map.get(s);
			
			else if(s.equals("鞋面材质") || s.equals("材质"))
				upperMaterial = map.get(s);
			
			else if(s.equals("风格"))
				style = map.get(s);
			
			else if(s.equals("跟型"))
				heelStyle = map.get(s);
			
			else if(s.equals("流行元素"))
				fashion = map.get(s);
			
			else if(s.equals("单鞋开口"))
				upperHeight = map.get(s);
			
			else if(s.equals("跟高"))
				heelHeight = map.get(s);
			
			else if(s.equals("女鞋头款"))
				toe = map.get(s);
			
			else if(s.equals("场合"))
				occasion = map.get(s);
			
			else if(s.equals("季节"))
				season = map.get(s);
			
			else if(s.equals("图案"))
				pattern = map.get(s);
		}
		
	}
	
	
	//处理n对n关系的表
	private void writeDBnTon(String goodsId,String content,
			String entityTableName,String relationTableName,
			String entityIdName,String entityName) {
		//专门用来处理多对多关系的函数，参数分别为   1、goodsId 2、要插入到实体表中的内容
		//3、实体表和关系表名	4、实体id名和实体名
		
		//如果为空，创建一个Statement
		try {
			if(stmt == null)
				stmt = (Statement)conn.createStatement();
			
			//String tmpstr=new String("人造革/PU".getBytes(),"gbk");
			//String tmpstr = "人造革/PU";
			
			/*String str = "人造革";
			byte[] buffer;
			buffer = str.getBytes("gbk");
			String tmpstr = new String(buffer, "utf-8");*/
			//System.out.println(tmpstr);
			
			//stmt.executeUpdate("insert into inner_material(inner_material_name) values(\""+tmpstr+"\");");
			
			
			//测试第一个理论：直接从数据库中取出
			/*rs = stmt.executeQuery("select inner_material_name from inner_material where inner_material_id = 82;");
			String teststr = null;
			if(rs.next()){
				teststr = rs.getString(1);
			}
			teststr = new String(teststr.getBytes("ISO8859_1"),"GBK");
			System.out.println(teststr);*/
			
			//return;
		} catch (SQLException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		//将content的多个内容拆开
		String s[] = content.split(" 　");
		
		
		int entityId=-1;
		for (int i = 0; i < s.length; i++) {
			
			//查询是否已经存在
			sql = "SELECT "+entityIdName+" FROM "+entityTableName+" where "+entityName+" = \"" + s[i] + "\";";
//			System.out.println(sql);
			
			try {
				
				rs = stmt.executeQuery(sql);
				
				//如果已存在，直接找出实体Id
				if(rs.next()){
	    			//请注意，一定要rs.next()，不然就差不到getInt    			
					entityId=rs.getInt(1);
					System.out.println("已存在 id == "+entityId);
	    		}else{
	    			//如果不存在，插入实体表
					sql = "insert into "+entityTableName+"("+entityName+") values(\"" + s[i] + "\");";
					System.out.println("没有记录: "+sql);
					stmt.executeUpdate(sql);
					entityId = getRecordNum(entityTableName);
					entityId++;
					System.out.println("e2 == " + entityId);
	    		}
				
				
				
				//插入关系表
				sql = "insert into "+relationTableName+"("+entityIdName+") values(\"" + entityId + "\");";
				
			} catch (SQLException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}//try-catch
			
		}//for
		
		
	}
	
	
	//关闭资源函数
	private void close(){
		try {
			if(rs!=null){
				
				rs.close();
				rs=null;
			}
			
			if(stmt!=null){
				
				stmt.close();
				stmt=null;
			}
			
			if(!conn.isClosed()){
				conn.close();
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	
}
